# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx

from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.jsonable_encoder import jsonable_encoder
from .errors.internal_server_error import InternalServerError
from .errors.not_found_error import NotFoundError

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class accelbooks:
    def __init__(
        self, *, base_url: str, timeout: typing.Optional[float] = 60, httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url, httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client
        )

    def create_company(
        self,
        *,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
    ) -> typing.Dict[str, typing.Any]:
        """
        Creates a new company.

        Parameters:
            - external_id: typing.Optional[str].

            - legal_name: typing.Optional[str].

            - tin: typing.Optional[str].

            - us_state: typing.Optional[str].

            - entity_type: typing.Optional[str].

            - phone_number: typing.Optional[str].
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.create_company()
        """
        _request: typing.Dict[str, typing.Any] = {}
        if external_id is not OMIT:
            _request["external_id"] = external_id
        if legal_name is not OMIT:
            _request["legal_name"] = legal_name
        if tin is not OMIT:
            _request["tin"] = tin
        if us_state is not OMIT:
            _request["us_state"] = us_state
        if entity_type is not OMIT:
            _request["entity_type"] = entity_type
        if phone_number is not OMIT:
            _request["phone_number"] = phone_number
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "company"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_company(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Retrieves a company by ID.

        Parameters:
            - id: str. The ID of the company to retrieve.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_company(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_company(
        self,
        id: str,
        *,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
    ) -> typing.Dict[str, typing.Any]:
        """
        Updates a company by ID.

        Parameters:
            - id: str. The ID of the company to update.

            - external_id: typing.Optional[str].

            - legal_name: typing.Optional[str].

            - tin: typing.Optional[str].

            - us_state: typing.Optional[str].

            - entity_type: typing.Optional[str].

            - phone_number: typing.Optional[str].

            - status: typing.Optional[str].
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.update_company(
            id="id",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if external_id is not OMIT:
            _request["external_id"] = external_id
        if legal_name is not OMIT:
            _request["legal_name"] = legal_name
        if tin is not OMIT:
            _request["tin"] = tin
        if us_state is not OMIT:
            _request["us_state"] = us_state
        if entity_type is not OMIT:
            _request["entity_type"] = entity_type
        if phone_number is not OMIT:
            _request["phone_number"] = phone_number
        if status is not OMIT:
            _request["status"] = status
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_company(self, id: str) -> None:
        """
        Deletes a company by ID.

        Parameters:
            - id: str. The ID of the company to delete.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.delete_company(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def export_transactions(self, id: str) -> str:
        """
        Exports transactions for a company.

        Parameters:
            - id: str. The ID of the company to export transactions for.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.export_transactions(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/export"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def export_company_data(self, id: str) -> str:
        """
        Exports company data to S3.

        Parameters:
            - id: str. The ID of the company to export data for.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.export_company_data(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/export"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_chats(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Retrieves chats for a company.

        Parameters:
            - id: str. The ID of the company to retrieve chats for.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_chats(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/chat"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_chat(self, id: str, *, request: typing.Dict[str, typing.Any]) -> typing.Dict[str, typing.Any]:
        """
        Creates a new chat for a company.

        Parameters:
            - id: str. The ID of the company to create a chat for.

            - request: typing.Dict[str, typing.Any].
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.create_chat(
            id="id",
            request={"key": "value"},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/chat"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_chat_messages(self, id: str, chat_id: str) -> typing.Dict[str, typing.Any]:
        """
        Retrieves messages for a specific chat.

        Parameters:
            - id: str. The ID of the company.

            - chat_id: str. The ID of the chat to retrieve messages for.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_chat_messages(
            id="id",
            chat_id="chatId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/chat/{chat_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_message(
        self, id: str, chat_id: str, *, request: typing.Dict[str, typing.Any]
    ) -> typing.Dict[str, typing.Any]:
        """
        Sends a message in a specific chat.

        Parameters:
            - id: str. The ID of the company.

            - chat_id: str. The ID of the chat to send a message to.

            - request: typing.Dict[str, typing.Any].
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.send_message(
            id="id",
            chat_id="chatId",
            request={"key": "value"},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/chat/{chat_id}"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_transactions_by_company(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Retrieves transactions for a specific company by ID.

        Parameters:
            - id: str. The ID of the company to retrieve transactions for.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_transactions_by_company(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/transactions"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def prompt_transaction(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Prompts a transaction using OpenAI.

        Parameters:
            - id: str. The ID of the company to prompt a transaction for.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.prompt_transaction(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/Prompt"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def exchange_token(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Exchanges a token for a company using Finch.

        Parameters:
            - id: str. The ID of the company to exchange the token for.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.exchange_token(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/finch"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_profit_and_loss(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Generates a profit and loss statement for a company.

        Parameters:
            - id: str. The ID of the company to generate the profit and loss statement for.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_profit_and_loss(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/reports/profit&loss"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def generate_general_ledger(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Generates a general ledger for a company.

        Parameters:
            - id: str. The ID of the company to generate the general ledger for.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.generate_general_ledger(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/general-ledger"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_categories_by_company(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Retrieves categories for a specific company by ID.

        Parameters:
            - id: str. The ID of the company to retrieve categories for.
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.get_categories_by_company(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/category"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_category(
        self, id: str, *, name: typing.Optional[str] = OMIT, type: typing.Optional[str] = OMIT
    ) -> typing.Dict[str, typing.Any]:
        """
        Creates a new category for a company.

        Parameters:
            - id: str. The ID of the company to create the category for.

            - name: typing.Optional[str].

            - type: typing.Optional[str].
        ---
        from Accelbooks.client import accelbooks

        client = accelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        client.create_category(
            id="id",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if type is not OMIT:
            _request["type"] = type
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/category"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class Asyncaccelbooks:
    def __init__(
        self,
        *,
        base_url: str,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url, httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client
        )

    async def create_company(
        self,
        *,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
    ) -> typing.Dict[str, typing.Any]:
        """
        Creates a new company.

        Parameters:
            - external_id: typing.Optional[str].

            - legal_name: typing.Optional[str].

            - tin: typing.Optional[str].

            - us_state: typing.Optional[str].

            - entity_type: typing.Optional[str].

            - phone_number: typing.Optional[str].
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.create_company()
        """
        _request: typing.Dict[str, typing.Any] = {}
        if external_id is not OMIT:
            _request["external_id"] = external_id
        if legal_name is not OMIT:
            _request["legal_name"] = legal_name
        if tin is not OMIT:
            _request["tin"] = tin
        if us_state is not OMIT:
            _request["us_state"] = us_state
        if entity_type is not OMIT:
            _request["entity_type"] = entity_type
        if phone_number is not OMIT:
            _request["phone_number"] = phone_number
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "company"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_company(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Retrieves a company by ID.

        Parameters:
            - id: str. The ID of the company to retrieve.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.get_company(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_company(
        self,
        id: str,
        *,
        external_id: typing.Optional[str] = OMIT,
        legal_name: typing.Optional[str] = OMIT,
        tin: typing.Optional[str] = OMIT,
        us_state: typing.Optional[str] = OMIT,
        entity_type: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
    ) -> typing.Dict[str, typing.Any]:
        """
        Updates a company by ID.

        Parameters:
            - id: str. The ID of the company to update.

            - external_id: typing.Optional[str].

            - legal_name: typing.Optional[str].

            - tin: typing.Optional[str].

            - us_state: typing.Optional[str].

            - entity_type: typing.Optional[str].

            - phone_number: typing.Optional[str].

            - status: typing.Optional[str].
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.update_company(
            id="id",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if external_id is not OMIT:
            _request["external_id"] = external_id
        if legal_name is not OMIT:
            _request["legal_name"] = legal_name
        if tin is not OMIT:
            _request["tin"] = tin
        if us_state is not OMIT:
            _request["us_state"] = us_state
        if entity_type is not OMIT:
            _request["entity_type"] = entity_type
        if phone_number is not OMIT:
            _request["phone_number"] = phone_number
        if status is not OMIT:
            _request["status"] = status
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_company(self, id: str) -> None:
        """
        Deletes a company by ID.

        Parameters:
            - id: str. The ID of the company to delete.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.delete_company(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def export_transactions(self, id: str) -> str:
        """
        Exports transactions for a company.

        Parameters:
            - id: str. The ID of the company to export transactions for.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.export_transactions(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/export"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def export_company_data(self, id: str) -> str:
        """
        Exports company data to S3.

        Parameters:
            - id: str. The ID of the company to export data for.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.export_company_data(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/export"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_chats(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Retrieves chats for a company.

        Parameters:
            - id: str. The ID of the company to retrieve chats for.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.get_chats(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/chat"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_chat(self, id: str, *, request: typing.Dict[str, typing.Any]) -> typing.Dict[str, typing.Any]:
        """
        Creates a new chat for a company.

        Parameters:
            - id: str. The ID of the company to create a chat for.

            - request: typing.Dict[str, typing.Any].
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.create_chat(
            id="id",
            request={"key": "value"},
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/chat"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_chat_messages(self, id: str, chat_id: str) -> typing.Dict[str, typing.Any]:
        """
        Retrieves messages for a specific chat.

        Parameters:
            - id: str. The ID of the company.

            - chat_id: str. The ID of the chat to retrieve messages for.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.get_chat_messages(
            id="id",
            chat_id="chatId",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/chat/{chat_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_message(
        self, id: str, chat_id: str, *, request: typing.Dict[str, typing.Any]
    ) -> typing.Dict[str, typing.Any]:
        """
        Sends a message in a specific chat.

        Parameters:
            - id: str. The ID of the company.

            - chat_id: str. The ID of the chat to send a message to.

            - request: typing.Dict[str, typing.Any].
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.send_message(
            id="id",
            chat_id="chatId",
            request={"key": "value"},
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/chat/{chat_id}"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_transactions_by_company(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Retrieves transactions for a specific company by ID.

        Parameters:
            - id: str. The ID of the company to retrieve transactions for.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.get_transactions_by_company(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/transactions"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def prompt_transaction(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Prompts a transaction using OpenAI.

        Parameters:
            - id: str. The ID of the company to prompt a transaction for.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.prompt_transaction(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/Prompt"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def exchange_token(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Exchanges a token for a company using Finch.

        Parameters:
            - id: str. The ID of the company to exchange the token for.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.exchange_token(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/finch"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_profit_and_loss(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Generates a profit and loss statement for a company.

        Parameters:
            - id: str. The ID of the company to generate the profit and loss statement for.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.get_profit_and_loss(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/reports/profit&loss"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def generate_general_ledger(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Generates a general ledger for a company.

        Parameters:
            - id: str. The ID of the company to generate the general ledger for.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.generate_general_ledger(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/general-ledger"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_categories_by_company(self, id: str) -> typing.Dict[str, typing.Any]:
        """
        Retrieves categories for a specific company by ID.

        Parameters:
            - id: str. The ID of the company to retrieve categories for.
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.get_categories_by_company(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/category"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_category(
        self, id: str, *, name: typing.Optional[str] = OMIT, type: typing.Optional[str] = OMIT
    ) -> typing.Dict[str, typing.Any]:
        """
        Creates a new category for a company.

        Parameters:
            - id: str. The ID of the company to create the category for.

            - name: typing.Optional[str].

            - type: typing.Optional[str].
        ---
        from Accelbooks.client import Asyncaccelbooks

        client = Asyncaccelbooks(
            base_url="https://yourhost.com/path/to/api",
        )
        await client.create_category(
            id="id",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if type is not OMIT:
            _request["type"] = type
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"company/{id}/category"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
